Every Vue application starts by creating a new Vue instance with the Vue function:

var vm = new Vue({
  // options
})

we often use the variable vm (short for ViewModel) to refer to our Vue instance.

When you create a Vue instance, you pass in an options object. References: https://vuejs.org/v2/api/#Options-Data

A Vue application consists of a root Vue instance created with new Vue, optionally organized into a tree of nested, reusable components.

Root Instance
└─ TodoList
   ├─ TodoItem
   │  ├─ DeleteTodoButton
   │  └─ EditTodoButton
   └─ TodoListFooter
      ├─ ClearTodosButton
      └─ TodoListStatistics

For now, just know that all Vue components are also Vue instances, and so accept the same options object (except for a few root-specific options).

* Data and Methods
    When a Vue instance is created, it adds all the properties found in its data object to Vue’s reactivity system. 
        When the values of those properties change, the view will “react”, updating to match the new values.
    
    // Our data object
    var data = { a: 1 }

    // The object is added to a Vue instance
    var vm = new Vue({
        data: data
    })

    // Getting the property on the instance
    // returns the one from the original data
    vm.a == data.a // => true

    // Setting the property on the instance
    // also affects the original data
    vm.a = 2
    data.a // => 2

    // ... and vice-versa
    data.a = 3
    vm.a // => 3

    When this data changes, the view will re-render. It should be noted that properties in data are only reactive 
        if they existed when the instance was created. That means if you add a new property, like:

    vm.b = 'hi'
    Then changes to b will not trigger any view updates. If you know you’ll need a property later, but it starts out empty or non-existent, 
        you’ll need to set some initial value.
        data: {
            newTodoText: '',
            visitCount: 0,
            hideCompletedTodos: false,
            todos: [],
            error: null
        }


    In addition to data properties, Vue instances expose a number of useful instance properties and methods. 
        These are prefixed with $ to differentiate them from user-defined properties. For example:
        var data = { a: 1 }
        var vm = new Vue({
            el: '#example',
            data: data
        })

        vm.$data === data // => true
        vm.$el === document.getElementById('example') // => true

        // $watch is an instance method
        vm.$watch('a', function (newValue, oldValue) {
        // This callback will be called when `vm.a` changes
        })
    Refs: https://vuejs.org/v2/api/#Instance-Properties
    
* Instance Lifecycle Hooks
    Each Vue instance goes through a series of initialization steps when it’s created - 
        for example, it needs to set up data observation, compile the template, mount the instance to the DOM, and update the DOM when data changes.
    Along the way, it also runs functions called lifecycle hooks, giving users the opportunity to add their own code at specific stages.

    There are also other hooks which will be called at different stages of the instance’s lifecycle, such as mounted, updated, and destroyed. 
        All lifecycle hooks are called with their this context pointing to the Vue instance invoking it.