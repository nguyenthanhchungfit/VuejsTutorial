Vue.js uses an HTML-based template syntax that allows you to declaratively bind the rendered DOM to the underlying Vue instance’s data. 
    All Vue.js templates are valid HTML that can be parsed by spec-compliant browsers and HTML parsers.

Under the hood, Vue compiles the templates into Virtual DOM render functions. 
    Combined with the reactivity system, Vue is able to intelligently figure out the minimal number of components 
    to re-render and apply the minimal amount of DOM manipulations when the app state changes.

* Text:
    The most basic form of data binding is text interpolation using the “Mustache” syntax (double curly braces):
        <span>Message: {{ msg }}</span>
    You can also perform one-time interpolations that do not update on data change by using the v-once directive. 
        *  but keep in mind this will also affect any other bindings on the same node:
        <span v-once>This will never change: {{ msg }}</span>

* Raw HTML 
    The double mustaches interprets the data as plain text, not HTML. In order to output real HTML, you will need to use the v-html directive:
        <p>Using mustaches: {{ rawHtml }}</p>
        <p>Using v-html directive: <span v-html="rawHtml"></span></p>

    Dynamically rendering arbitrary HTML on your website can be very dangerous because it can easily lead to XSS vulnerabilities. 
        Only use HTML interpolation on trusted content and never on user-provided content.

* Attributes
    Mustaches cannot be used inside HTML attributes. Instead, use a v-bind directive:
        <div v-bind:id="dynamicId"></div>
    In the case of boolean attributes, where their mere existence implies true, v-bind works a little differently. In this example:
        <button v-bind:disabled="isButtonDisabled">Button</button>
        If isButtonDisabled has the value of null, undefined, or false, the disabled attribute will not even be included in the rendered <button> element.
    
* Using JavaScript Expressions
    So far we’ve only been binding to simple property keys in our templates. 
        But Vue.js actually supports the full power of JavaScript expressions inside all data bindings:
        {{ number + 1 }}

        {{ ok ? 'YES' : 'NO' }}

        {{ message.split('').reverse().join('') }}

        <div v-bind:id="'list-' + id"></div>

    These expressions will be evaluated as JavaScript in the data scope of the owner Vue instance. 
        One restriction is that each binding can only contain one single expression, so the following will NOT work:
        <!-- this is a statement, not an expression: -->
        {{ var a = 1 }}

        <!-- flow control won't work either, use ternary expressions -->
        {{ if (ok) { return message } }}

    ! Template expressions are sandboxed and only have access to a whitelist of globals such as Math and Date. 
        You should not attempt to access user defined globals in template expressions.
    