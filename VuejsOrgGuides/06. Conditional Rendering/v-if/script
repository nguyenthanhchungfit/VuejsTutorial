The directive v-if is used to conditionally render a block. The block will only be rendered if the directive‚Äôs expression returns a truthy value.
    <h1 v-if="awesome">Vue is awesome!</h1>
It is also possible to add an ‚Äúelse block‚Äù with v-else:
    <h1 v-else>Oh no üò¢</h1>

* Conditional Groups with v-if on <template>
    Because v-if is a directive, it has to be attached to a single element. 
        But what if we want to toggle more than one element? In this case we can use v-if on a <template> element, 
        which serves as an invisible wrapper. The final rendered result will not include the <template> element.
        <template v-if="ok">
            <h1>Title</h1>
            <p>Paragraph 1</p>
            <p>Paragraph 2</p>
        </template>

* v-else
    <div v-if="Math.random() > 0.5">
        Now you see me
    </div>
    <div v-else>
        Now you don't
    </div>

    A v-else element must immediately follow a v-if or a v-else-if element - otherwise it will not be recognized.

* v-else-if (2.1.0+)
    <div v-if="type === 'A'">
         A
    </div>
    <div v-else-if="type === 'B'">
        B
    </div>
    <div v-else-if="type === 'C'">
        C
    </div>
    <div v-else>
        Not A/B/C
    </div>

* Controlling Reusable Elements with key
    Vue tries to render elements as efficiently as possible, often re-using them instead of rendering from scratch. 
        Beyond helping make Vue very fast, this can have some useful advantages. 
        For example, if you allow users to toggle between multiple login types:

        <template v-if="loginType === 'username'">
            <label>Username</label>
            <input placeholder="Enter your username">
        </template>
        <template v-else>
            <label>Email</label>
            <input placeholder="Enter your email address">
        </template>

        Then switching the loginType in the code above will not erase what the user has already entered. 
            Since both templates use the same elements, the <input> is not replaced - just its placeholder.

        
        This isn‚Äôt always desirable though, so Vue offers a way for you to say, ‚ÄúThese two elements are completely separate - don‚Äôt re-use them.‚Äù Add a key attribute with unique values:

            <template v-if="loginType === 'username'">
                <label>Username</label>
                <input placeholder="Enter your username" key="username-input">
            </template>
            <template v-else>
                <label>Email</label>
                <input placeholder="Enter your email address" key="email-input">
            </template>

        => Note that the <label> elements are still efficiently re-used, because they don‚Äôt have key attributes.
    


